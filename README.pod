=for html <a href="https://travis-ci.org/jddurand/c-genericHash"><img src="https://travis-ci.org/jddurand/c-genericHash.svg?branch=master" alt="Travis CI build status" height="18"></a> <a href="https://badge.fury.io/gh/jddurand%2Fc-genericHash"><img src="https://badge.fury.io/gh/jddurand%2Fc-genericHash.svg" alt="GitHub version" height="18"></a> <a href="http://opensource.org/licenses/MIT" rel="nofollow noreferrer"><img src="https://img.shields.io/badge/license-MIT-blue.svg" alt="License MIT" height="18"></a>

=head1 NAME

genericHash - generic hash interface

=head1 DESCRIPTION

genericHash is an ANSI set of macros exposing key hashing and comparison functions, as well as key/value copying and freeing functions. It is built on top of L<genericStack|https://github.com/jddurand/c-genericStack>.

=head1 SYNOPSIS

  #include <genericHash.h>

  genericHash_t *myHashp;

=head1 MACROS

=head2 C<GENERICHASH_NEW>(hashName, indFunctionp)

Alias to C<GENERICHASH_NEW_ALL>(hashName, keyIndFunctionp, keyCmpFunctionp, keyCopyFunctionp, keyFreeFunctionp, valCopyFunctionp, valFreeFunctionp, wantedSize, thisWantedSubSize), see below.

=head2 C<GENERICHASH_NEW_ALL>(hashName, keyIndFunctionp, keyCmpFunctionp, keyCopyFunctionp, keyFreeFunctionp, valCopyFunctionp, valFreeFunctionp, wantedSize, thisWantedSubSize)

Create an empty hash on the heap, where function pointer prototypes are:

  typedef size_t (*genericHashKeyIndFunction_t)(void *userDatavp, genericStackItemType_t itemType, void *p);
  typedef short  (*genericHashKeyCmpFunction_t)(void *userDatavp, void *p1, void *p2);
  typedef void  *(*genericHashKeyCopyFunction_t)(void *userDatavp, void *p);
  typedef void   (*genericHashKeyFreeFunction_t)(void *userDatavp, void *p);
  typedef void  *(*genericHashValCopyFunction_t)(void *userDatavp, void *p);
  typedef void   (*genericHashValFreeFunction_t)(void *userDatavp, void *p);

All these functions are called with a context C<userDatavp> that is passed as-is through macros.

=over

=item C<keyIndFunctionp>

Mandatory. C<itemType> is inherited from genericStack, e.g. it can be C<GENERICSTACKITEMTYPE_CHAR>, C<GENERICSTACKITEMTYPE_PTR>, etc... 

=back

and for every data, C<indFunctionp> is used to return a hash indice. This indice function receive a I<pointer> to the original data. The number of rows in the hash will always increase automatically, whenever needed, and never decrease. To handle the case of collisions, C<cmpFunctionp> is called and must return a true value when the key of the two values I<pointed by> C<p1> and C<p2> matches. Within a hash row, the number of elements decrease and increase automatically. C<unique>, when true, has a performance impact on the hash, because it internally makes sure that a given key can appear only once, using both the C<indFunctionp> (to get the row indice in the hash) and C<cmpFunctionp> functions (to compare keys).

  It is legal to say C<NULL> for C<indFunctionp>, but then the user will have to always call the I<_BY_IND> macros. C<cmpFunctionp> must not be a null function pointer.

=head2 GENERICHASH_NEW_SIZED(hashName, indFunctionp, cmpFunctionp, wantedSize, wantedSubSize)

Like the new method, but creates an initial C<wantedSize> number of rows, and declares every row to have an initial C<wantedSubSize> number of elements.

=head2 GENERICHASH_SET(hashName, userDatavp, itemType, value)

Set an entry in hash C<hashName>, using the data C<value> which is of type C<itemType>. The C<userDatavp> variable is the context that will propagated to callback functions: the indice callback is always used, the comparison callback is used if the hash have the unique flag.

=head2 GENERICHASH_SET_BY_IND(hashName, userDatavp, itemType, ind, value)

Same as GENERICHASH_SET, but at the row number C<ind>, pre-calculated by the user.

=head2 GENERICHASH_FIND(hashName, userDatavp, wantedType, wantedVar, findResult, got)

Search for the data C<wantedVar> of type C<wantedType> in hash C<hashName>. The value 1 or 0 or stored in C<findResult> if success or not, respectively. The found value is pushed into C<got>. The C<userDatavp> variable is the context that will propagated to callback functions.

=head2 GENERICHASH_FIND_BY_IND(hashName, userDatavp, wantedType, wantedInd, wantedVar, findResult, got)

Same as GENERICHASH_FIND, but at the row number C<ind>, pre-calculated by the user.

=head2 GENERICHASH_REMOVE(hashName, userDatavp, wantedType, wantedVar, findResult, got)

Remove for the data C<wantedVar> of type C<wantedType> in hash C<hashName>. The value 1 or 0 or stored in C<findResult> if data was found or not, respectively. The removed value is pushed into C<got>. The C<userDatavp> variable is the context that will propagated to callback functions.

=head2 GENERICHASH_REMOVE_BY_IND(hashName, userDatavp, wantedType, wantedInd, wantedVar, findResult, got)

Same as GENERICHASH_REMOVE, but at the row number C<ind>, pre-calculated by the user.

=head2 GENERICHASH_FREE(hashName)

Releases the hash.

=head1 SEE ALSO

L<genericStack|https://github.com/jddurand/c-genericStack>
